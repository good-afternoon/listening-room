@charset "utf-8";

//// mixin ////
$color-black: #000;

@mixin easing{
  transition: all 0.3s ease-out;
}

// Retina用に1/2サイズにする
// floor : 小数点以下を切り下げ
@mixin width($size) {
  width: floor(($size / 2)) + px;
}

@mixin max-width($size) {
  max-width: floor(($size / 2)) + px;
}

// font-sizeの計算
@mixin font-size($font-size) {
  // 小数の桁数は小数点第1位まで
  // それ以下は切り捨て
  font-size: decimal-floor( ($font-size / 10) / 2, 1) + rem;
}

// letter-spacingの計算
@mixin letter-spacing($letter-spacing) {
  // 小数の桁数は小数点第1位まで
  // それ以下は切り捨て
  letter-spacing: decimal-floor( ($letter-spacing / 1000), 2) + em;
}

// line-heightの計算
@mixin line-height($font-height, $font-size) {
  // 小数の桁数は小数点第1位まで
  // それ以下は切り捨て
  line-height: decimal-floor($font-height / $font-size, 1);
}

// 小数の桁数を制御する
@function decimal-round($number, $digits: 0, $mode: round) {
  $n: 1;
  @if type-of($number) != number {
    @warn '#{ $number } is not a number.';
    @return $number;
  }
  @if type-of($digits) != number {
    @warn '#{ $digits } is not a number.';
    @return $number;
  } @else if not unitless($digits) {
    @warn '#{ $digits } has a unit.';
    @return $number;
  }
  @if $digits > 0 {
    @for $i from 1 through $digits {
      $n: $n * 10;
    }
  }
  @if $mode == round {
    @return round($number * $n) / $n;
  } @else if $mode == ceil {
    @return ceil($number * $n) / $n;
  } @else if $mode == floor {
    @return floor($number * $n) / $n;
  } @else {
    @warn '#{ $mode } is undefined keyword.';
    @return $number;
  }
}

@function decimal-ceil($number, $digits: 0) {
  @return decimal-round($number, $digits, ceil);
}

@function decimal-floor($number, $digits: 0) {
  @return decimal-round($number, $digits, floor);
}

//// easing ////
$ease          : cubic-bezier(0.25, 0.1, 0.25, 1);
$linear        : cubic-bezier(0, 0, 1, 1);
$easeIn        : cubic-bezier(0.42, 0, 1, 1);
$easeOut       : cubic-bezier(0, 0, 0.58, 1);
$easeInOut     : cubic-bezier(0.42, 0, 0.58, 1);

$easeInSine    : cubic-bezier(0.47, 0, 0.745, 0.715);
$easeOutSine   : cubic-bezier(0.39, 0.575, 0.565, 1);
$easeInOutSine : cubic-bezier(0.445, 0.05, 0.55, 0.95);
$easeInQuad    : cubic-bezier(0.55, 0.085, 0.68, 0.53);
$easeOutQuad   : cubic-bezier(0.25, 0.46, 0.45, 0.94);
$easeInOutQuad : cubic-bezier(0.455, 0.03, 0.515, 0.955);

$easeInCubic    : cubic-bezier(0.55, 0.055, 0.675, 0.19);
$easeOutCubic   : cubic-bezier(0.215, 0.61, 0.355, 1);
$easeInOutCubic : cubic-bezier(0.645, 0.045, 0.355, 1);
$easeInQuart    : cubic-bezier(0.895, 0.03, 0.685, 0.22);
$easeOutQuart   : cubic-bezier(0.165, 0.84, 0.44, 1);
$easeInOutQuart : cubic-bezier(0.77, 0, 0.175, 1);

$easeInQuint    : cubic-bezier(0.755, 0.05, 0.855, 0.06);
$easeOutQuint   : cubic-bezier(0.23, 1, 0.32, 1);
$easeInOutQuint : cubic-bezier(0.86, 0, 0.07, 1);
$easeInExpo     : cubic-bezier(0.95, 0.05, 0.795, 0.035);
$easeOutExpo    : cubic-bezier(0.19, 1, 0.22, 1);
$easeInOutExpo  : cubic-bezier(1, 0, 0, 1);

$easeInCirc     : cubic-bezier(0.6, 0.04, 0.98, 0.335);
$easeOutCirc    : cubic-bezier(0.075, 0.82, 0.165, 1);
$easeInOutCirc  : cubic-bezier(0.785, 0.135, 0.15, 0.86);
$easeInBack     : cubic-bezier(0.6, -0.28, 0.735, 0.045);
$easeOutBack    : cubic-bezier(0.175, 0.885, 0.32, 1.275);
$easeInOutBack  : cubic-bezier(0.68, -0.55, 0.265, 1.55);


//// media query ////

//min-width
$breakpoint-up: (
  'sm'          : 'screen and (min-width: 668px)',  //SP
  'md'          : 'screen and (min-width: 769px)',  //ipad - 縦向き
  'pc'          : 'screen and (min-width: 1081px)', //PC
  'ipad'        : 'screen and (min-width: 1113px)', //10.5インチ iPad - 横向き
) !default;

//max-width
$breakpoint-down: (
  'sm-wide'     : 'screen and (max-width: 667px) and (orientation: landscape)',  //SP - 横向き
  'iphone5'     : 'screen and (max-width: 350px)',  //SP - iPhone5以下
  'sm'          : 'screen and (max-width: 667px)',  //SP
  'md'          : 'screen and (max-width: 768px)',  //ipad - 縦向き
  'ipad'        : 'screen and (max-width: 1112px)', //10.5インチ ipad - 横向き
  //'ipad'        : 'screen and (max-width: 1024px)', //ipad - 横向き
) !default;

@mixin mq-up($breakpoint: md) { //defaultは'md'サイズ指定
  @media #{map-get($breakpoint-up, $breakpoint)} {
    @content;
  }
}

@mixin mq-down($breakpoint: md) { //defaultは'md'サイズ指定
  @media #{map-get($breakpoint-down, $breakpoint)} {
    @content;
  }
}